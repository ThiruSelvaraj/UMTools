import com.latencybusters.lbm.*;
import java.text.NumberFormat;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;


// See https://communities.informatica.com/infakb/faq/5/Pages/80008.aspx
import org.openmdx.uses.gnu.getopt.*;

/*
  Copyright (c) 2005-2018 Informatica Corporation  Permission is granted to licensees to use
  or alter this software for any purpose, including commercial applications,
  according to the terms laid out in the Software License Agreement.

  This source code example is provided by Informatica for educational
  and evaluation purposes only.

  THE SOFTWARE IS PROVIDED "AS IS" AND INFORMATICA DISCLAIMS ALL WARRANTIES 
  EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY IMPLIED WARRANTIES OF 
  NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
  PURPOSE.  INFORMATICA DOES NOT WARRANT THAT USE OF THE SOFTWARE WILL BE 
  UNINTERRUPTED OR ERROR-FREE.  INFORMATICA SHALL NOT, UNDER ANY CIRCUMSTANCES, BE 
  LIABLE TO LICENSEE FOR LOST PROFITS, CONSEQUENTIAL, INCIDENTAL, SPECIAL OR 
  INDIRECT DAMAGES ARISING OUT OF OR RELATED TO THIS AGREEMENT OR THE 
  TRANSACTIONS CONTEMPLATED HEREUNDER, EVEN IF INFORMATICA HAS BEEN APPRISED OF 
  THE LIKELIHOOD OF SUCH DAMAGES.

  NOTES:
  ----------------------------------------------------------------------------
  + This application is essentially an extension of the lbmmon sample application with new options 
    that create UM receivers to parse statistics generated by the umestored and the tnwgd UM daemons.  
     The onReceive() callback for the receivers calls stat_parser(), a JNI function that:
  	- Combines the parsing utilities in the tnwgdmon.c (for tnwgd) and umedmon.c (for umestored) sample applications
  	- Parses the statistics and saves it to a buffer in JSON and XML format. 
     This approach effectively re-uses the existing parsers written in C. An alternative approach would be to parsing the
     statistics entirely in java. 
  + Two contexts are created for each of the receivers; attributes for each context can be set via XML configuration. 
  + A verbose options can also be selected which prints the statistics in the format of lbmmon.java, tnwgdmon.c and umedmon.c 
    The string; (JSON stats and/or XML configuration), is printed to stdout by default, stored in a file specified on the command line.
  ----------------------------------------------------------------------------
*/

class lbmmond_json
{

	private static String purpose = "Purpose: Example LBM and UM Deamon statistics monitoring application.";
	private static String usage =
"Usage: lbmmond_json [options] topic \n"+ 
"Available options:\n"+ 
"  -h, --help                 help\n"+ 
"  -t, --transport TRANS      use transport module TRANS\n"+ 
"                             TRANS may be `lbm', `udp', or `lbmsnmp', default is `lbm'\n"+ 
"      --transport-opts OPTS  use OPTS as transport module options\n"+ 
"  -f, --format FMT           use format module FMT\n"+ 
"                             FMT may be `csv'\n"+ 
"      --format-opts OPTS     use OPTS as format module options\n"+ 
"      \n"+ 
"      Transport and format options are passed as name=value pairs, separated by a semicolon.\n"+ 
"       \n"+ 
"      LBM transport options:\n"+ 
"        config=FILE            use LBM configuration file FILE\n"+ 
"        topic=TOPIC            receive statistics on topic TOPIC\n"+ 
"                               default is /29west/statistics\n"+ 
"        wctopic=PATTERN        receive statistics on wildcard topic PATTERN\n"+ 
"      \n"+ 
"      UDP transport options:\n"+ 
"        port=NUM               receive on UDP port NUM\n"+ 
"        interface=IP           receive multicast on interface IP\n"+ 
"        mcgroup=GRP            receive on multicast group GRP\n"+ 
"      \n"+ 
"      LBMSNMP transport options:\n"+ 
"        config=FILE            use LBM configuration file FILE\n"+ 
"        topic=TOPIC            receive statistics on topic TOPIC\n"+ 
"                               default is /29west/statistics\n"+ 
"        wctopic=PATTERN        receive statistics on wildcard topic PATTERN\n"+ 
"      \n"+ 
"      CSV format options:\n"+ 
"        separator=CHAR         separate CSV fields with character CHAR\n"+ 
"                               defaults to `,'\n"+
"  -s, --topic-store          Create context and topic receiver for umestored stats\n"+
"  -d, --topic-dro            Create context and topic receiver for tnwgd stats topic\n"+
"  -c, --cfg                  Flat configuration file for umestored and tnwgd topic receiver.\n"+
"  -x, --xml-config           XML configuration file: assumes [appname:lbmmond_json, (store) context_name:umestored, (dro) context_name:tnwgd] \n"+ 
"  -o, --outfile              File to save JSON output\n"+ 
"  -v, --verbose              be verbose. Statistics otherwise defaults to JSON/XML format\n"+ 
"  \n"+ 
"  Example:\n\t java -cp .:UMS_6.11.jar:openmdx-kernel.jar:log4j-1.2.9.jar  lbmmond_json -x sample_lbm.xml  -s store_monitor_topic  -d drotopic -o outfile.json -v \n"+ 
" "
;

	
	public static boolean verbose = false;
	public static char STATS_TYPE_NONE = 0;
	public static char STATS_TYPE_UMP = 1;
	public static char STATS_TYPE_DRO = 2;
	public static char STATS_TYPE_LBM = 3;
	public static char stat_type = 0;
	public native  int stat_parser(java.nio.ByteBuffer msg_buffer, long msg_size, boolean verbose_flag, char _stats_type, char[] JSON_buffer);
	public static void main(String[] args)
	{
		System.loadLibrary("dmon_parser");
		BufferedWriter filewriter=null;

		LBM lbm = null;
		try
		{
			lbm = new LBM();
		}
		catch (LBMException ex)
		{
			System.err.println("Error initializing LBM: " + ex.toString());
			System.exit(1);
		}
		org.apache.log4j.Logger logger;
		logger = org.apache.log4j.Logger.getLogger("lbmmond_json");
		org.apache.log4j.BasicConfigurator.configure();
		log4jLogger lbmlogger = new log4jLogger(logger);
		lbm.setLogger(lbmlogger);

		LBMObjectRecyclerBase objRec = new LBMObjectRecycler();
		int transport = LBMMonitor.TRANSPORT_LBM;
		int format = LBMMonitor.FORMAT_CSV;
		String transport_options = "";
		String format_options = "";
		LongOpt[] longopts = new LongOpt[11];
		final int OPTION_MONITOR_TRANSPORT = 4;
		final int OPTION_MONITOR_TRANSPORT_OPTS = 5; 
		final int OPTION_MONITOR_FORMAT = 6;
		final int OPTION_MONITOR_FORMAT_OPTS = 7;
		longopts[0] = new LongOpt("transport", LongOpt.REQUIRED_ARGUMENT, null, OPTION_MONITOR_TRANSPORT);
		longopts[1] = new LongOpt("transport-opts", LongOpt.REQUIRED_ARGUMENT, null, OPTION_MONITOR_TRANSPORT_OPTS);
		longopts[2] = new LongOpt("format", LongOpt.REQUIRED_ARGUMENT, null, OPTION_MONITOR_FORMAT);
		longopts[3] = new LongOpt("format-opts", LongOpt.REQUIRED_ARGUMENT, null, OPTION_MONITOR_FORMAT_OPTS);
		longopts[4] = new LongOpt("help", LongOpt.NO_ARGUMENT, null, 'h');
		longopts[5] = new LongOpt("topic-store", LongOpt.REQUIRED_ARGUMENT, null, 's');
		longopts[6] = new LongOpt("topic-dro", LongOpt.REQUIRED_ARGUMENT, null, 'd');
		longopts[7] = new LongOpt("cfg", LongOpt.REQUIRED_ARGUMENT, null, 'c');
		longopts[9] = new LongOpt("xml-config", LongOpt.REQUIRED_ARGUMENT, null, 'x');
		longopts[9] = new LongOpt("outfile", LongOpt.REQUIRED_ARGUMENT, null, 'o');
		longopts[10] = new LongOpt("verbose", LongOpt.NO_ARGUMENT, null, 'v');
		Getopt gopt = new Getopt("lbmmond_json", args, "+t:f:c:s:d:x:o:vh", longopts);
		int c = -1;
		boolean error = false;
		String dro_topicname=null;
		String store_topicname=null;
		String xml_filename=null;
		String outfileName=null;



		while ((c = gopt.getopt()) != -1)
		{
			switch (c)
			{
				case 'h':
					print_help_exit(0);
				case 'c':
					try
					{
						LBM.setConfiguration(gopt.getOptarg());
					}
					catch (LBMException ex)
					{
						System.err.println("Error setting LBM configuration: " + ex.toString());
						System.exit(1);
					}
					break;
				case 'f':
				case OPTION_MONITOR_FORMAT:
					if (gopt.getOptarg().compareToIgnoreCase("csv") == 0)
						format = LBMMonitor.FORMAT_CSV;
					else
						error = true;
					break;
				case 't':
				case OPTION_MONITOR_TRANSPORT:
					if (gopt.getOptarg().compareToIgnoreCase("lbm") == 0)
					{
						transport = LBMMonitor.TRANSPORT_LBM;
					}
					else
					{
						if (gopt.getOptarg().compareToIgnoreCase("udp") == 0)
						{
							transport = LBMMonitor.TRANSPORT_UDP;
						}
						else
						{
							if (gopt.getOptarg().compareToIgnoreCase("lbmsnmp") == 0)
							{
								transport = LBMMonitor.TRANSPORT_LBMSNMP;
							}
							else
							{
								error = true;
							}
						}
					}
					break;
				case OPTION_MONITOR_TRANSPORT_OPTS:
					transport_options += gopt.getOptarg();
					break;
				case OPTION_MONITOR_FORMAT_OPTS:
					format_options += gopt.getOptarg();
					break;
				case 's':
                			store_topicname = gopt.getOptarg();
					break;
				case 'd':
                			dro_topicname = gopt.getOptarg();
					break;
				case 'x':
                			xml_filename = gopt.getOptarg();
					break;
				case 'o':
                			outfileName = gopt.getOptarg();
					try {
                				filewriter = new BufferedWriter(new FileWriter(outfileName, true));
						filewriter.append("\n");
					} catch (IOException ex) { 
						System.err.println("Error creating file \"" + outfileName + "\": " + ex.toString());
						ex.printStackTrace();
						System.exit(1);
					} 
					break;
				case 'v':
					verbose = true;
					break;
				default:
					error = true;
					break;
			}
			if (error)
				break;
		}

		if (error)
		{
			/* An error occurred processing the command line - print help and exit */
			print_help_exit(1);
		}

		LBMRcvEventQueue evq = null;

		if( args.length > gopt.getOptind()){
                	store_topicname = args[gopt.getOptind()];
                	System.out.println("*** LBMMOND_JSON: [WARN] Store topic defaulted to " + store_topicname + "\n" );
		}


		/* Load in XML file */
		if( xml_filename != null ){
	               	try
	               	{
				LBM.setConfigurationXml(xml_filename, "lbmmond_json");
	               	}
	               	catch (LBMException ex)
	               	{
	                       	System.err.println("*** LBMMOND_JSON: Could not set UM XML configuration for lbmmond_json app: " + ex.toString() + "\n" );
	               	}
		}

		if( store_topicname == null && dro_topicname == null ){
                	System.out.println("*** LBMMOND_JSON: [WARN] No receiver created for daemon stats topic" + "\n" );
		} else {
			/* Create receivers for the daemon stats */
			/*****************************************/
			try
			{
				evq = new LBMRcvEventQueue();
			}
			catch (LBMException ex)
			{
				System.err.println("Error creating event queue: " + ex.toString() + "\n" );
				System.exit(1);
			}

			/* Store stats receiver */
			/************************/
			if( store_topicname != null ){
	
		                LBMContextAttributes store_ctx_attr = null;
		                try
		                {
		                        store_ctx_attr = new LBMContextAttributes();
					store_ctx_attr.setFromXml("umestored");
		                        store_ctx_attr.setObjectRecycler(objRec, null);
		                }
		                catch (LBMException ex)
		                {
		                        System.err.println("Error creating context attributes: " + ex.toString() + "\n" );
		                        System.exit(1);
		                }
	
				LBMContext store_ctx = null;
		                try
		                {
		                        store_ctx = new LBMContext(store_ctx_attr);
		                        System.out.println("*** LBMMOND_JSON: [INFO] Store_stats: Multicast resolver address and port:"
		                                                + store_ctx.getAttributeValue("resolver_multicast_address") + ":"
		                                                + store_ctx.getAttributeValue("resolver_multicast_port")
								+ "\n" );
		                        System.out.println("*** LBMMOND_JSON: [INFO] Store_stats: Unicast resolver daemon:"
		                                                + store_ctx.getAttributeValue("resolver_unicast_daemon")
								+ "\n" );
		                }
		                catch (LBMException ex)
		                {
		                        System.err.println("Error creating context: " + ex.toString());
		                        System.exit(1);
		                }

				LBMDaemonStatsReceiver rcv_callback = new LBMDaemonStatsReceiver(verbose, LBMDaemonStatsReceiver.STATS_TYPE_UMP, filewriter);
		                LBMTopic topic = null;
		                try
		                {
		                        LBMReceiverAttributes rcv_attr = new LBMReceiverAttributes();
					rcv_attr.setFromXml("umestored", store_topicname);
					/* Promoted messages will be recycled */
		                        rcv_attr.setObjectRecycler(objRec, null);
		                        topic = new LBMTopic(store_ctx, store_topicname, rcv_attr);
		                }
		                catch (LBMException ex)
		                {
		                        System.err.println("Error looking up Store topic: " + ex.toString());
		                        System.exit(1);
		                }
		
				LBMReceiver lbmrcv = null;
				try
		               	{
					lbmrcv = new LBMReceiver(store_ctx, topic, rcv_callback, null, evq);
				}
				catch (LBMException ex)
		               	{
					System.err.println("Error creating receiver: " + ex.toString());
					System.exit(1);
				}
	                	System.out.println("*** LBMMOND_JSON: [INFO] Receiver created for store stats topic: " + store_topicname + "\n");
			}


			/* DRO stats receiver */
			/**********************/
			if( dro_topicname != null ){

	                	LBMContextAttributes dro_ctx_attr = null;
		                try
		                {
		                        dro_ctx_attr = new LBMContextAttributes();
					dro_ctx_attr.setFromXml("tnwgd");
		                        dro_ctx_attr.setObjectRecycler(objRec, null);
		                }
		                catch (LBMException ex)
		                {
		                        System.err.println("Error creating context attributes: " + ex.toString());
		                        System.exit(1);
		                }
		
				LBMContext dro_ctx = null;
		                try
		                {
		                        dro_ctx = new LBMContext(dro_ctx_attr);
					System.out.println("*** LBMMOND_JSON: [INFO] DRO_stats: Multicast resolver address and port:"
		                                                + dro_ctx.getAttributeValue("resolver_multicast_address") + ":"
		                                                + dro_ctx.getAttributeValue("resolver_multicast_port")
								+ "\n" );
		                        System.out.println("*** LBMMOND_JSON: [INFO] DRO_stats: Unicast resolver daemon:"
		                                                + dro_ctx.getAttributeValue("resolver_unicast_daemon")
								+ "\n" );
		                }
		                catch (LBMException ex)
		                {
		                        System.err.println("Error creating context: " + ex.toString());
		                        System.exit(1);
		                }


				LBMDaemonStatsReceiver rcv_callback = new LBMDaemonStatsReceiver(verbose, LBMDaemonStatsReceiver.STATS_TYPE_DRO, filewriter);
		                LBMTopic topic = null;
		                try
		                {
		                        LBMReceiverAttributes rcv_attr = new LBMReceiverAttributes();
					rcv_attr.setFromXml("tnwgd", dro_topicname);
					/* Promoted messages will be recycled */
		                        rcv_attr.setObjectRecycler(objRec, null);
		                        topic = new LBMTopic(dro_ctx, dro_topicname, rcv_attr);
		                }
		                catch (LBMException ex)
		                {
		                        System.err.println("Error looking up DRO topic: " + ex.toString());
		                        System.exit(1);
		                }
		
				LBMReceiver lbmrcv = null;
				try
		               	{
					lbmrcv = new LBMReceiver(dro_ctx, topic, rcv_callback, null, evq);
				}
				catch (LBMException ex)
		               	{
					System.err.println("Error creating receiver: " + ex.toString());
					System.exit(1);
				}
	                	System.out.println("*** LBMMOND_JSON: [INFO] Receiver created for dro stats topic: " + dro_topicname + "\n" );
			}
		}// receiver for deamon stats topic


		// create monitoring transport receiver
		LBMMonitorReceiver lbmmond_jsonRcv = null;
		try
		{
			lbmmond_jsonRcv = new LBMMonitorReceiver(format, format_options, transport, transport_options, objRec, null);
		}
		catch (LBMException ex)
		{
			System.err.println("Error creating monitor receiver: " + ex.toString());
			System.exit(1);
		}
		LBMMonCallbacks lbmmond_jsoncbs = new LBMMonCallbacks(lbmmond_jsonRcv, objRec, filewriter);
		lbmmond_jsonRcv.addStatisticsCallback(lbmmond_jsoncbs);
		lbmmond_json my_lbmmon = new lbmmond_json();

		for (;;)
		{
			if( evq == null ){
				try
				{
					Thread.sleep(2000);
				}
				catch (InterruptedException e) { }
				
			} else {
				evq.run(1000);
			}
			if( filewriter != null ){
				try {
					filewriter.flush();
				}
				catch (IOException ex) {
					System.err.println("Error writing to file  \"" + outfileName + "\": " + ex.toString());
				}
			}
		}

	}
	
	private static void print_help_exit(int exit_value)
	{
		System.err.println(LBM.version());
		System.err.println(purpose);
		System.err.println(usage);
		System.exit(exit_value);
	}
}

class LBMMonCallbacks extends LBMMonitorStatisticsCallbackObject
{
	@SuppressWarnings("unused")
	private LBMMonitorReceiver _lbmmond_jsonRcv;
	private LBMObjectRecyclerBase _objRec;
	private BufferedWriter _filewriter = null;
	
	LBMMonCallbacks(LBMMonitorReceiver lbmmond_jsonRcv, LBMObjectRecyclerBase objRec, BufferedWriter filewriter)
	{
		_lbmmond_jsonRcv = lbmmond_jsonRcv;
		_objRec = objRec;
		_filewriter = filewriter;
	}

	public void onReceive(LBMSourceStatistics stats)
	{
		String outstring = null;

		if( lbmmond_json.verbose ) {
			System.err.print("\nSource statistics received");
		} else {
			outstring = "\n{\"SRC_STATS_MSG\":{";
		}
		try
		{
			if( lbmmond_json.verbose ) {
				System.err.print(" from " + stats.getApplicationSourceId());
				System.err.print(" at " + stats.getSender().toString());
				System.err.println(", sent " + stats.getTimestamp().toString());
				System.err.println("Source: " + stats.source());
				System.err.println("Transport: " + stats.typeName());
				switch (stats.type())
				{
					case LBM.TRANSPORT_STAT_TCP:
						System.err.println("\tClients       : " +
										   stats.numberOfClients());
						System.err.println("\tBytes buffered: " +
										   stats.bytesBuffered());
						break;
					case LBM.TRANSPORT_STAT_LBTRM:
						System.err.println("\tLBT-RM datagrams sent                                 : " +
										   stats.messagesSent());                                  
						System.err.println("\tLBT-RM datagram bytes sent                            : " +
										   stats.bytesSent());                                     
						System.err.println("\tLBT-RM datagrams in transmission window               : " +
										   stats.transmissionWindowMessages());                    
						System.err.println("\tLBT-RM datagram bytes in transmission window          : " +
										   stats.transmissionWindowBytes());                       
						System.err.println("\tLBT-RM NAK packets received                           : " +
										   stats.nakPacketsReceived());                            
						System.err.println("\tLBT-RM NAKs received                                  : " +
										   stats.naksReceived());                                  
						System.err.println("\tLBT-RM NAKs ignored                                   : " +
										   stats.naksIgnored());                                   
						System.err.println("\tLBT-RM NAKs shed                                      : " +
										   stats.naksShed());                                      
						System.err.println("\tLBT-RM NAKs ignored (retransmit delay)                : " +
										   stats.naksIgnoredRetransmitDelay());
						System.err.println("\tLBT-RM retransmission datagrams sent                  : " +
										   stats.retransmissionsSent());
						System.err.println("\tLBT-RM retransmission datagrams bytes sent            : " +
										   stats.retransmissionBytesSent());
						System.err.println("\tLBT-RM datagrams queued by rate control               : " +
										   stats.messagesQueued());
						System.err.println("\tLBT-RM retransmission datagrams queued by rate control: " +
										   stats.retransmissionsQueued());
						break;
					case LBM.TRANSPORT_STAT_LBTRU:
						System.err.println("\tLBT-RU datagrams sent                    : " +
										   stats.messagesSent());                      
						System.err.println("\tLBT-RU datagram bytes sent               : " +
										   stats.bytesSent());                         
						System.err.println("\tLBT-RU NAK packets received              : " +
										   stats.nakPacketsReceived());                
						System.err.println("\tLBT-RU NAKs received                     : " +
										   stats.naksReceived());                      
						System.err.println("\tLBT-RU NAKs ignored                      : " +
										   stats.naksIgnored());                       
						System.err.println("\tLBT-RU NAKs shed                         : " +
										   stats.naksShed());
						System.err.println("\tLBT-RU NAKs ignored (retransmit delay)   : " +
										   stats.naksIgnoredRetransmitDelay());
						System.err.println("\tLBT-RU retransmission datagrams sent     : " +
										   stats.retransmissionsSent());
						System.err.println("\tLBT-RU retransmission datagram bytes sent: " +
								   		   stats.retransmissionBytesSent());
						System.err.println("\tClients                                  : " +
										   stats.numberOfClients());
						break;
					case LBM.TRANSPORT_STAT_LBTIPC:
						System.err.println("\tClients                    :" + stats.numberOfClients());
						System.err.println("\tLBT-IPC datagrams sent     :" + stats.messagesSent());
						System.err.println("\tLBT-IPC datagram bytes sent:" + stats.bytesSent());
						break;
					case LBM.TRANSPORT_STAT_LBTSMX:
						System.err.println("\tClients                    :" + stats.numberOfClients());
						System.err.println("\tLBT-SMX datagrams sent     :" + stats.messagesSent());
						System.err.println("\tLBT-SMX datagram bytes sent:" + stats.bytesSent());
						break;
					case LBM.TRANSPORT_STAT_LBTRDMA:
						System.err.println("\tClients                    :" + stats.numberOfClients());
						System.err.println("\tLBT-RDMA datagrams sent     :" + stats.messagesSent());
						System.err.println("\tLBT-RDMA datagram bytes sent:" + stats.bytesSent());
						break;
					case LBM.TRANSPORT_STAT_BROKER:
						System.err.println("\tBROKER messages sent       : " + stats.messagesSent());
						System.err.println("\tBROKER message bytes sent  : " + stats.bytesSent());
						break;
					default:
						System.err.println("Error: unknown transport type received." + stats.type());
						break;
					}
			} else {
				outstring +=
					"\"getApplicationSourceId\":\"" + stats.getApplicationSourceId() +
					"\",\"getSender\":\"" + stats.getSender().toString() +
					"\",\"getTimestamp\":\"" + stats.getTimestamp().toString() + 
					"\",\"source\":\"" + stats.source() + 
					"\",\"typeName\":\"" + stats.typeName() + "\",";
				switch (stats.type())
				{
					case LBM.TRANSPORT_STAT_TCP:
						outstring += "\"STAT_TCP\":{" 	 + 
						"\"numberOfClients\":"		 + stats.numberOfClients() + "," +
						"\"bytesBuffered\":"	 + stats.bytesBuffered() + "}}" ;
						break;
					case LBM.TRANSPORT_STAT_LBTRM:
						outstring += "\"STAT_LBTRM\"" + ":{" +
						"\"messagesSent\":"		 + stats.messagesSent() + "," +
						"\"bytesSent\":"	 + stats.bytesSent() + "," +
						"\"transmissionWindowMessages\":"	 + stats.transmissionWindowMessages() + "," +
						"\"transmissionWindowBytes\":"	 + stats.transmissionWindowBytes() + "," +
						"\"nakPacketsReceived\":"	 + stats.nakPacketsReceived() + "," +
						"\"naksReceived\":"		 + stats.naksReceived() + "," +
						"\"naksIgnored\":"	 + stats.naksIgnored() + "," +
						"\"naksShed\":"		 + stats.naksShed() + "," +
						"\"naksIgnoredRetransmitDelay\":" + stats.naksIgnoredRetransmitDelay() + "," +
						"\"retransmissionsSent\":"		 + stats.retransmissionsSent() + "," +
					  	"\"retransmissionBytesSent\":"	 + stats.retransmissionBytesSent() + "," +
						"\"messagesQueued\":"	 + stats.messagesQueued() + "," +
						"\"retransmissionsQueued\":"		 + stats.retransmissionsQueued() + "}}";
						break;
					case LBM.TRANSPORT_STAT_LBTRU:
						outstring += "\"STAT_LBTRU\"" + ":{" +
						"\"messagesSent\":"		 + stats.messagesSent() + "," +
						"\"bytesSent\":"	 + stats.bytesSent() + "," +
						"\"nakPacketsReceived\":"	 + stats.nakPacketsReceived() + "," +
						"\"naksReceived\":"		 + stats.naksReceived() + "," +
						"\"naksIgnored\":"	 + stats.naksIgnored() + "," +
						"\"naksShed\":"		 + stats.naksShed() + "," +
						"\"naksIgnoredRetransmitDelay\":" + stats.naksIgnoredRetransmitDelay() + "," +
						"\"retransmissionsSent\":"		 + stats.retransmissionsSent() + "," +
					  	"\"retransmissionBytesSent\":"	 + stats.retransmissionBytesSent() + "," +
						"\"numberOfClients\":"		 + stats.numberOfClients() + "}}";
						break;
					case LBM.TRANSPORT_STAT_LBTIPC:
						outstring += "\"STAT_LBTIPC\"" + ":{" +
						"\"numberOfClients\":"		 + stats.numberOfClients() + "," +
						"\"messagesSent\":"		 + stats.messagesSent() + "," + 
						"\"bytesSent\":"	 + stats.bytesSent() + "}}" ;
						break;
					case LBM.TRANSPORT_STAT_LBTSMX:
						outstring += "\"STAT_LBTSMX\"" + ":{" +
						"\"numberOfClients\":"		 + stats.numberOfClients() + "," +
						"\"messagesSent\":"		 + stats.messagesSent() + "," + 
						"\"bytesSent\":"	 + stats.bytesSent() + "}}" ;
						break;
					case LBM.TRANSPORT_STAT_LBTRDMA:
						outstring += "\"STAT_LBTRDMA\"" + ":{" +
						"\"numberOfClients\":"		 + stats.numberOfClients() + "," +
						"\"messagesSent\":"		 + stats.messagesSent() + "," + 
						"\"bytesSent\":"	 + stats.bytesSent() + "}}" ;
						break;
					case LBM.TRANSPORT_STAT_BROKER:
						outstring += "\"STAT_LBTRDMA\"" + ":{" +
						"\"messagesSent\":"		 + stats.messagesSent() + "," + 
						"\"bytesSent\":"	 + stats.bytesSent() + "}}" ;
						break;
					default:
						System.err.println("Error: unknown transport type received." + stats.type());
						break;
				}
				outstring += "}";
				if( _filewriter == null ){
					System.err.println(outstring);
				} else {
					try {
						_filewriter.append(outstring);
						_filewriter.flush();
					}
					catch (IOException ex) {
						System.err.println("Error writing to file: " + ex.toString());
					}
				}
			}
		}
		catch (Exception ex)
		{
			System.err.println("Error getting source statistics: " + ex.toString());
		}
		_objRec.doneWithSourceStatistics(stats);
	}

	public void onReceive(LBMReceiverStatistics stats)
	{
		String outstring = null; 

		if( lbmmond_json.verbose ) {
			System.err.print("\nReceiver statistics received");
		} else {
			outstring = "\n{\"RCV_STATS_MSG\":{";
		}
		
		try
		{
		if( lbmmond_json.verbose ) {
			System.err.print(" from " + stats.getApplicationSourceId());
			System.err.print(" at " + stats.getSender().toString());
			System.err.println(", sent " + stats.getTimestamp().toString());
			System.err.println("Source: " + stats.source());
			System.err.println("Transport: " + stats.typeName());
			switch (stats.type())
			{
				case LBM.TRANSPORT_STAT_TCP:
					System.err.println("\tLBT-TCP bytes received                                    : " +
									   stats.bytesReceived());
					System.err.println("\tLBM messages received                                     : " +
									   stats.lbmMessagesReceived());
					System.err.println("\tLBM messages received with uninteresting topic            : " +
									   stats.noTopicMessagesReceived());
					System.err.println("\tLBM requests received                                     : " +
									   stats.lbmRequestsReceived());
					break;
				case LBM.TRANSPORT_STAT_LBTRM:
					System.err.println("\tLBT-RM datagrams received                                 : " +
									   stats.messagesReceived());                                  
					System.err.println("\tLBT-RM datagram bytes received                            : " +
									   stats.bytesReceived());                                     
					System.err.println("\tLBT-RM NAK packets sent                                   : " +
									   stats.nakPacketsSent());                                    
					System.err.println("\tLBT-RM NAKs sent                                          : " +
									   stats.naksSent());                                          
					System.err.println("\tLost LBT-RM datagrams detected                            : " +
									   stats.lost());                                              
					System.err.println("\tNCFs received (ignored)                                   : " +
									   stats.ncfsIgnored());                                       
					System.err.println("\tNCFs received (shed)                                      : " +
									   stats.ncfsShed());                                          
					System.err.println("\tNCFs received (retransmit delay)                          : " +
									   stats.ncfsRetransmissionDelay());                           
					System.err.println("\tNCFs received (unknown)                                   : " +
									   stats.ncfsUnknown());                                       
					System.err.println("\tLoss recovery minimum time                                : " +
									   stats.minimumRecoveryTime() + "ms");                        
					System.err.println("\tLoss recovery mean time                                   : " +
									   stats.meanRecoveryTime() + "ms");                           
					System.err.println("\tLoss recovery maximum time                                : " +
									   stats.maximumRecoveryTime() + "ms");                        
					System.err.println("\tMinimum transmissions per individual NAK                  : " +
									   stats.minimumNakTransmissions());                           
					System.err.println("\tMean transmissions per individual NAK                     : " +
									   stats.meanNakTransmissions());                              
					System.err.println("\tMaximum transmissions per individual NAK                  : " +
									   stats.maximumNakTransmissions());                           
					System.err.println("\tDuplicate LBT-RM datagrams received                       : " +
									   stats.duplicateMessages());
					System.err.println("\tLBT-RM datagrams unrecoverable (window advance)           : " +
									   stats.unrecoveredMessagesWindowAdvance());
					System.err.println("\tLBT-RM datagrams unrecoverable (NAK generation expiration): " +
									   stats.unrecoveredMessagesNakGenerationTimeout());
					System.err.println("\tLBT-RM LBM messages received                              : " +
									   stats.lbmMessagesReceived());                               
					System.err.println("\tLBT-RM LBM messages received with uninteresting topic     : " +
									   stats.noTopicMessagesReceived());                           
					System.err.println("\tLBT-RM LBM requests received                              : " +
									   stats.lbmRequestsReceived());                               
					System.err.println("\tLBT-RM datagrams dropped (size)                           : " +
									   stats.datagramsDroppedIncorrectSize());                     
					System.err.println("\tLBT-RM datagrams dropped (type)                           : " +
									   stats.datagramsDroppedType());                              
					System.err.println("\tLBT-RM datagrams dropped (version)                        : " +
									   stats.datagramsDroppedVersion());                           
					System.err.println("\tLBT-RM datagrams dropped (header)                         : " +
									   stats.datagramsDroppedHeader());                            
					System.err.println("\tLBT-RM datagrams dropped (other)                          : " +
									   stats.datagramsDroppedOther());
					System.err.println("\tLBT-RM datagrams received out of order                    : " +
									   stats.outOfOrder());
					break;
				case LBM.TRANSPORT_STAT_LBTRU:
					System.err.println("\tLBT-RU datagrams received                                 : " +
									   stats.messagesReceived());
					System.err.println("\tLBT-RU datagram bytes received                            : " +
									   stats.bytesReceived());
					System.err.println("\tLBT-RU NAK packets sent                                   : " +
									   stats.nakPacketsSent());                                    
					System.err.println("\tLBT-RU NAKs sent                                          : " +
									   stats.naksSent());                                          
					System.err.println("\tLost LBT-RU datagrams detected                            : " +
									   stats.lost());                                              
					System.err.println("\tNCFs received (ignored)                                   : " +
									   stats.ncfsIgnored());                                       
					System.err.println("\tNCFs received (shed)                                      : " +
									   stats.ncfsShed());                                          
					System.err.println("\tNCFs received (retransmit delay)                          : " +
									   stats.ncfsRetransmissionDelay());                           
					System.err.println("\tNCFs received (unknown)                                   : " +
									   stats.ncfsUnknown());                                       
					System.err.println("\tLoss recovery minimum time                                : " +
									   stats.minimumRecoveryTime() + "ms");                        
					System.err.println("\tLoss recovery mean time                                   : " +
									   stats.meanRecoveryTime() + "ms");                           
					System.err.println("\tLoss recovery maximum time                                : " +
									   stats.maximumRecoveryTime() + "ms");                        
					System.err.println("\tMinimum transmissions per individual NAK                  : " +
									   stats.minimumNakTransmissions());                           
					System.err.println("\tMean transmissions per individual NAK                     : " +
									   stats.meanNakTransmissions());                              
					System.err.println("\tMaximum transmissions per individual NAK                  : " +
									   stats.maximumNakTransmissions());                           
					System.err.println("\tDuplicate LBT-RU datagrams received                       : " +
									   stats.duplicateMessages());                                 
					System.err.println("\tLBT-RU datagrams unrecoverable (window advance)           : " +
									   stats.unrecoveredMessagesWindowAdvance());
					System.err.println("\tLBT-RU datagrams unrecoverable (NAK generation expiration): " +
									   stats.unrecoveredMessagesNakGenerationTimeout());
					System.err.println("\tLBT-RU LBM messages received                              : " +
									   stats.lbmMessagesReceived());                               
					System.err.println("\tLBT-RU LBM messages received with uninteresting topic     : " +
									   stats.noTopicMessagesReceived());                           
					System.err.println("\tLBT-RU LBM requests received                              : " +
									   stats.lbmRequestsReceived());                               
					System.err.println("\tLBT-RU datagrams dropped (size)                           : " +
									   stats.datagramsDroppedIncorrectSize());                     
					System.err.println("\tLBT-RU datagrams dropped (type)                           : " +
									   stats.datagramsDroppedType());                              
					System.err.println("\tLBT-RU datagrams dropped (version)                        : " +
									   stats.datagramsDroppedVersion());                           
					System.err.println("\tLBT-RU datagrams dropped (header)                         : " +
									   stats.datagramsDroppedHeader());                            
					System.err.println("\tLBT-RU datagrams dropped (SID)                            : " +
									   stats.datagramsDroppedSID());                               
					System.err.println("\tLBT-RU datagrams dropped (other)                          : " +
									   stats.datagramsDroppedOther());
					break;
				case LBM.TRANSPORT_STAT_LBTIPC:
					System.err.println("\tLBT-IPC datagrams received                                :" + stats.messagesReceived());
					System.err.println("\tLBT-IPC datagram bytes received                           :" + stats.bytesReceived());
					System.err.println("\tLBT-IPC LBM messages received                             :" + stats.lbmMessagesReceived());
					System.err.println("\tLBT-IPC LBM messages received with uninteresting topic    :" + stats.noTopicMessagesReceived());
					System.err.println("\tLBT-IPC LBM requests received                             :" + stats.lbmRequestsReceived());
					break;
				case LBM.TRANSPORT_STAT_LBTSMX:
					System.err.println("\tLBT-SMX datagrams received                                :" + stats.messagesReceived());
					System.err.println("\tLBT-SMX datagram bytes received                           :" + stats.bytesReceived());
					System.err.println("\tLBT-SMX LBM messages received                             :" + stats.lbmMessagesReceived());
					System.err.println("\tLBT-SMX LBM messages received with uninteresting topic    :" + stats.noTopicMessagesReceived());
					System.err.println("\tLBT-SMX LBM requests received                             :" + stats.lbmRequestsReceived());
					break;
				case LBM.TRANSPORT_STAT_LBTRDMA:
					System.err.println("\tLBT-RDMA datagrams received                                :" + stats.messagesReceived());
					System.err.println("\tLBT-RDMA datagram bytes received                           :" + stats.bytesReceived());
					System.err.println("\tLBT-RDMA LBM messages received                             :" + stats.lbmMessagesReceived());
					System.err.println("\tLBT-RDMA LBM messages received with uninteresting topic    :" + stats.noTopicMessagesReceived());
					System.err.println("\tLBT-RDMA LBM requests received                             :" + stats.lbmRequestsReceived());
					break;
				case LBM.TRANSPORT_STAT_BROKER:
					System.err.println("\tBROKER messages received                                   : " + stats.messagesReceived());
					System.err.println("\tBROKER message bytes received                              : " + stats.bytesReceived());
					break;
				default:
					System.err.println("Error: unknown transport type received." + stats.type());
					break;
				}

			} else {
				outstring +=
					"\"getApplicationSourceId\":\"" + stats.getApplicationSourceId() +
					"\",\"getSender\":\"" + stats.getSender().toString() +
					"\",\"getTimestamp\":\"" + stats.getTimestamp().toString() + 
					"\",\"source\":\"" + stats.source() + 
					"\",\"typeName\":\"" + stats.typeName() + "\",";
				switch (stats.type())
				{
					case LBM.TRANSPORT_STAT_TCP:
						outstring += "\"STAT_TCP\":{" 	 + 
						"\"bytesReceived\":" 	 +  stats.bytesReceived() + "," +
						"\"lbmMessagesReceived\":"	 + stats.lbmMessagesReceived() + "," +
						"\"NoTopicmessagesReceived\":"	 + stats.noTopicMessagesReceived() + "," +
						"\"lbmRequestsReceived\":"	 + stats.lbmRequestsReceived() + "}}";
						break;
					case LBM.TRANSPORT_STAT_LBTRM:
						outstring += "\"STAT_LBTRM\":{" + 
						"\"messagesReceived\":"	   	 + stats.messagesReceived() + "," + 
						"\"bytesReceived\":"	 + stats.bytesReceived() + "," + 
						"\"nakPacketsSent\":"	 + stats.nakPacketsSent() + "," + 
						"\"naksSent\":"		 + stats.naksSent() + "," + 
						"\"Lost\":"		 + stats.lost() + "," + 
						"\"ncfsIgnored\":"	 + stats.ncfsIgnored() + "," + 
						"\"ncfsShed\":"		 + stats.ncfsShed() + "," + 
						"\"ncfsRetransmissionDelay\":"	 + stats.ncfsRetransmissionDelay() + "," + 
						"\"ncfsUnknown\":"	 + stats.ncfsUnknown() + "," + 
						"\"minimumRecoveryTime\":"	 + stats.minimumRecoveryTime() + "," + 
						"\"meanRecoveryTime\":"  + stats.meanRecoveryTime() + "," + 
						"\"maximumRecoveryTime\":"	 + stats.maximumRecoveryTime() + "," + 
						"\"minimumNakTransmissions\":"	 + stats.minimumNakTransmissions() + "," + 
						"\"meanNakTransmissions\":"	 + stats.meanNakTransmissions() + "," + 
						"\"maximumNakTransmissions\":"	 + stats.maximumNakTransmissions() + "," +  
						"\"duplicateMessages\":"		 + stats.duplicateMessages() + "," +
						"\"unrecoveredMessagesWindowAdvance\":"	 + stats.unrecoveredMessagesWindowAdvance() + "," +
						"\"unrecoveredMessagesNakGenerationTimeout\":"   + stats.unrecoveredMessagesNakGenerationTimeout() + "," +
						"\"lbmMessagesReceived\":"	 + stats.lbmMessagesReceived() + "," +                               
						"\"NoTopicmessagesReceived\":"	 + stats.noTopicMessagesReceived() + "," +                           
						"\"lbmRequestsReceived\":"	 + stats.lbmRequestsReceived() + "," +                               
						"\"datagramsDroppedIncorrectSize\":"	 + stats.datagramsDroppedIncorrectSize() + "," +                     
						"\"datagramsDroppedType\":"	 + stats.datagramsDroppedType() + "," +                              
						"\"datagramsDroppedVersion\":"	 + stats.datagramsDroppedVersion() + "," +                           
						"\"datagramsDroppedHeader\":"	 + stats.datagramsDroppedHeader() + "," +                            
						"\"datagramsDroppedOther\":"	 + stats.datagramsDroppedOther() + "," +
						"\"outOfOrder\":"	 + stats.outOfOrder() + "}}";
						break;
					case LBM.TRANSPORT_STAT_LBTRU:
						outstring += "\"STAT_LBTRU\":{" + 
						"\"messagesReceived\":"	   	 + stats.messagesReceived() + "," + 
						"\"bytesReceived\":"	 + stats.bytesReceived() + "," + 
						"\"nakPacketsSent\":"	 + stats.nakPacketsSent() + "," + 
						"\"naksSent\":"		 + stats.naksSent() + "," + 
						"\"Lost\":"		 + stats.lost() + "," + 
						"\"ncfsIgnored\":"	 + stats.ncfsIgnored() + "," + 
						"\"ncfsShed\":"		 + stats.ncfsShed() + "," + 
						"\"ncfsRetransmissionDelay\":"	 + stats.ncfsRetransmissionDelay() + "," + 
						"\"ncfsUnknown\":"	 + stats.ncfsUnknown() + "," + 
						"\"minimumRecoveryTime\":"	 + stats.minimumRecoveryTime() + "," + 
						"\"meanRecoveryTime\":"  + stats.meanRecoveryTime() + "," + 
						"\"maximumRecoveryTime\":"	 + stats.maximumRecoveryTime() + "," + 
						"\"minimumNakTransmissions\":"	 + stats.minimumNakTransmissions() + "," + 
						"\"meanNakTransmissions\":"	 + stats.meanNakTransmissions() + "," + 
						"\"maximumNakTransmissions\":"	 + stats.maximumNakTransmissions() + "," +  
						"\"duplicateMessages\":"		 + stats.duplicateMessages() + "," +
						"\"unrecoveredMessagesWindowAdvance\":"	 + stats.unrecoveredMessagesWindowAdvance() + "," +
						"\"unrecoveredMessagesNakGenerationTimeout\":"   + stats.unrecoveredMessagesNakGenerationTimeout() + "," +
						"\"lbmMessagesReceived\":"	 + stats.lbmMessagesReceived() + "," +                               
						"\"NoTopicmessagesReceived\":"	 + stats.noTopicMessagesReceived() + "," +                           
						"\"lbmRequestsReceived\":"	 + stats.lbmRequestsReceived() + "," +                               
						"\"datagramsDroppedIncorrectSize\":"	 + stats.datagramsDroppedIncorrectSize() + "," +                     
						"\"datagramsDroppedType\":"	 + stats.datagramsDroppedType() + "," +                              
						"\"datagramsDroppedVersion\":"	 + stats.datagramsDroppedVersion() + "," +                           
						"\"datagramsDroppedHeader\":"	 + stats.datagramsDroppedHeader() + "," +                            
						"\"datagramsDroppedSID\":"	 + stats.datagramsDroppedSID() + "," + 
						"\"datagramsDroppedOther\":"	 + stats.datagramsDroppedOther() + "}}";
						break;
					case LBM.TRANSPORT_STAT_LBTIPC:
						outstring += "\"STAT_LBTIPC\":{" + 
						"\"messagesReceived\":"	   	 + stats.messagesReceived() + "," + 
						"\"bytesReceived\":"	 + stats.bytesReceived() + "," + 
						"\"lbmMessagesReceived\":"	 + stats.lbmMessagesReceived() + "," +                               
						"\"NoTopicmessagesReceived\":"	 + stats.noTopicMessagesReceived() + "," +                           
						"\"lbmRequestsReceived\":"	 + stats.lbmRequestsReceived() + "}}";                               
						break;
					case LBM.TRANSPORT_STAT_LBTSMX:
						outstring += "\"STAT_LBTSMX\":{" + 
						"\"messagesReceived\":"	   	 + stats.messagesReceived() + "," + 
						"\"bytesReceived\":"	 + stats.bytesReceived() + "," + 
						"\"lbmMessagesReceived\":"	 + stats.lbmMessagesReceived() + "," +                               
						"\"NoTopicmessagesReceived\":"	 + stats.noTopicMessagesReceived() + "," +                           
						"\"lbmRequestsReceived\":"	 + stats.lbmRequestsReceived() + "}}";                               
						break;
					case LBM.TRANSPORT_STAT_LBTRDMA:
						outstring += "\"STAT_LBTRDMA\":{" + 
						"\"messagesReceived\":"	   	 + stats.messagesReceived() + "," + 
						"\"bytesReceived\":"	 + stats.bytesReceived() + "," + 
						"\"lbmMessagesReceived\":"	 + stats.lbmMessagesReceived() + "," +                               
						"\"NoTopicmessagesReceived\":"	 + stats.noTopicMessagesReceived() + "," +                           
						"\"lbmRequestsReceived\":"	 + stats.lbmRequestsReceived() + "}}";                               
						break;
					case LBM.TRANSPORT_STAT_BROKER:
						outstring += "\"STAT_BROKER\":{" + 
						"\"messagesReceived\":"	   	 + stats.messagesReceived() + "," + 
						"\"bytesReceived\":"	 + stats.bytesReceived() + "}}";
						break;
					default:
						System.err.println("Error: unknown transport type received." + stats.type());
						break;
				}
				outstring += "}";
				if( _filewriter == null ){
					System.err.println(outstring);
				} else {
					try {
						_filewriter.append(outstring);
						_filewriter.flush();
					}
					catch (IOException ex) {
						System.err.println("Error writing to file: " + ex.toString());
					}
				}

			}
		}
		catch (Exception ex)
		{
			System.err.println("Error getting receiver statistics: " + ex.toString());
		}
		_objRec.doneWithReceiverStatistics(stats);
	}
	public void onReceive(LBMContextStatistics stats)
	{
		String outstring = null;

		if( lbmmond_json.verbose ) {
			System.err.print("\nContext statistics received");
		} else {
			outstring = "\n{\"CTX_STATS_MSG\":{";
		}
		try
		{
			if( lbmmond_json.verbose ) {


				System.err.print(" from " + stats.getApplicationSourceId());
				System.err.print(" at " + stats.getSender().toString());
				System.err.println(", sent " + stats.getTimestamp().toString() );
	
				System.err.println("\tTopic resolution datagrams sent                    : " +
									stats.topicResolutionDatagramsSent());
				System.err.println("\tTopic resolution datagrams received                : " +
									stats.topicResolutionDatagramsReceived());
				System.err.println("\tTopic resolution datagram bytes sent               : " +
									stats.topicResolutionBytesSent());
				System.err.println("\tTopic resolution datagram bytes received           : " +
									stats.topicResolutionBytesReceived());
				System.err.println("\tTopic resolution datagrams dropped version         : " +
									stats.topicResolutionDatagramsDroppedVersion());
				System.err.println("\tTopic resolution datagrams dropped type            : " +
									stats.topicResolutionDatagramsDroppedType());
				System.err.println("\tTopic resolution datagrams dropped malformed       : " +
									stats.topicResolutionDatagramsDroppedMalformed());
				System.err.println("\tTopic resolution datagrams send failed             : " +
									stats.topicResolutionDatagramsSendFailed());
				System.err.println("\tTopic resolution source topics                     : " +
									stats.topicResolutionSourceTopics());
				System.err.println("\tTopic resolution receiver topics                   : " +
									stats.topicResolutionReceiverTopics());
				System.err.println("\tTopic resolution unresolved receiver topics        : " +
									stats.topicResolutionUnresolvedReceiverTopics());
				System.err.println("\tLBT-RM unknown datagrams received                  : " +
									stats.lbtrmUnknownMessagesReceived());
				System.err.println("\tLBT-RU unknown datagrams received                  : " +
									stats.lbtruUnknownMessagesReceived());
				System.err.println("\tLBM send calls which blocked                       : " +
									stats.sendBlocked());
				System.err.println("\tLBM send calls which returned EWOULDBLOCK          : " +
									stats.sendWouldBlock());
				System.err.println("\tLBM response calls which blocked                   : " +
									stats.responseBlocked());
				System.err.println("\tLBM response calls which returned EWOULDBLOCK      : " +
									stats.responseWouldBlock());
				System.err.println("\tNumber of duplicate UIM messages dropped           : " +
									stats.unicastImmediateMessageDuplicatesReceived());
				System.err.println("\tNumber of UIM messages received without stream info: " +
									stats.unicastImmediateMessageNoStreamReceived());
			} else {
				outstring +=
					"\"getApplicationSourceId\":\"" + stats.getApplicationSourceId() +
					"\",\"getSender\":\"" + stats.getSender().toString() +
					"\",\"getTimestamp\":\"" + stats.getTimestamp().toString() + "\"," + "\"CTX_STATS\":{" +
					"\"topicResolutionDatagramsSent\":" 		+ stats.topicResolutionDatagramsSent() + "," +
					"\"topicResolutionDatagramsReceived\":" 	+ stats.topicResolutionDatagramsReceived() + "," +
					"\"topicResolutionBytesSent\":" 		+ stats.topicResolutionBytesSent() + "," +
					"\"topicResolutionBytesReceived\":" 		+ stats.topicResolutionBytesReceived() + "," +
					"\"topicResolutionDatagramsDroppedVersion\":"	+ stats.topicResolutionDatagramsDroppedVersion() + "," +
					"\"topicResolutionDatagramsDroppedType\":"		+ stats.topicResolutionDatagramsDroppedType() + "," +
					"\"topicResolutionDatagramsDroppedMalformed\":"	+ stats.topicResolutionDatagramsDroppedMalformed() + "," +
					"\"topicResolutionDatagramsSendFailed\":"	+ stats.topicResolutionDatagramsSendFailed() + "," +
					"\"TRSrcTopics\":" 		+ stats.topicResolutionSourceTopics() + "," +
					"\"topicResolutionReceiverTopics\":" 		+ stats.topicResolutionReceiverTopics() + "," +
					"\"topicResolutionUnresolvedReceiverTopics\":"	+ stats.topicResolutionUnresolvedReceiverTopics() + "," +
					"\"lbtrmUnknownMessagesReceived\":"		+ stats.lbtrmUnknownMessagesReceived() + "," +
					"\"lbtruUnknownMessagesReceived\":"		+ stats.lbtruUnknownMessagesReceived() + "," +
					"\"sendBlocked\":" 		+ stats.sendBlocked() + "," +
					"\"sendWouldBlock\":" 		+ stats.sendWouldBlock() + "," +
					"\"responseBlocked\":"		+ stats.responseBlocked() + "," +
					"\"responseWouldBlock\":"	+ stats.responseWouldBlock() + "," +
					"\"unicastImmediateMessageDuplicatesReceived\":"	+ stats.unicastImmediateMessageDuplicatesReceived() + "," +
					"\"unicastImmediateMessageNoStreamReceived\":"+ stats.unicastImmediateMessageNoStreamReceived() + "}}}";
				if( _filewriter == null ){
					System.err.println(outstring);
				} else {
					try {
						_filewriter.append(outstring);
						_filewriter.flush();
					}
					catch (IOException ex) {
						System.err.println("Error writing to file: " + ex.toString());
					}
				}
			}

		}
		catch (Exception ex){
			System.err.println("Error getting receiver statistics: " + ex.toString());
		}
		_objRec.doneWithContextStatistics(stats);
	}
	
	public void onReceive(LBMEventQueueStatistics stats)
	{
		String outstring = null;
 
		if( lbmmond_json.verbose ) {
			System.err.print("\nEvent Queue statistics received");
		} else { 
			outstring = "\n{\"EVQ_STATS_MSG\":{";
		}
			
		
		try {
			if( lbmmond_json.verbose ) {
				System.err.print(" from " + stats.getApplicationSourceId());
				System.err.print(" at " + stats.getSender().toString());
				System.err.println(", sent " + stats.getTimestamp().toString());
				System.err.println("\tData messages enqueued                                        : " +
									stats.dataMessages());
				System.err.println("\tTotal data messages enqueued                                  : " +
									stats.dataMessagesTotal());
				System.err.println("\tData messages min service time (microseconds)                 : " +
									stats.dataMessagesMinimumServiceTime());
				System.err.println("\tData messages mean service time (microseconds)                : " +
									stats.dataMessagesMeanServiceTime());
				System.err.println("\tData messages max service time (microseconds)                 : " +
									stats.dataMessagesMaximumServiceTime());
				System.err.println("\tResponse messages enqueued                                    : " +
									stats.responseMessages());
				System.err.println("\tTotal response messages enqueued                              : " +
									stats.responseMessagesTotal());
				System.err.println("\tResponse messages min service time (microseconds)             : " +
									stats.responseMessagesMinimumServiceTime());
				System.err.println("\tResponse messages mean service time (microseconds)            : " +
									stats.responseMessagesMeanServiceTime());
				System.err.println("\tResponse messages max service time (microseconds)             : " +
									stats.responseMessagesMaximumServiceTime());
				System.err.println("\tTopicless immediate messages enqueued                         : " +
									stats.topiclessImmediateMessages());
				System.err.println("\tTotal topicless immediate messages enqueued                   : " +
									stats.topiclessImmediateMessagesTotal());
				System.err.println("\tTopicless immediate messages min service time (microseconds)  : " +
									stats.topiclessImmediateMessagesMinimumServiceTime());
				System.err.println("\tTopicless immediate messages mean service time (microseconds) : " +
									stats.topiclessImmediateMessagesMeanServiceTime());
				System.err.println("\tTopicless immediate messages max service time (microseconds)  : " +
									stats.topiclessImmediateMessagesMaximumServiceTime());
				System.err.println("\tWildcard receiver messages enqueued                           : " +
									stats.wildcardReceiverMessages());
				System.err.println("\tTotal wildcard receiver messages enqueued                     : " +
									stats.wildcardReceiverMessagesTotal());
				System.err.println("\tWildcard receiver messages min service time (microseconds)    : " +
									stats.wildcardReceiverMessagesMinimumServiceTime());
				System.err.println("\tWildcard receiver messages mean service time (microseconds)   : " +
									stats.wildcardReceiverMessagesMeanServiceTime());
				System.err.println("\tWildcard receiver messages max service time (microseconds)    : " +
									stats.wildcardReceiverMessagesMaximumServiceTime());
				System.err.println("\tI/O events enqueued                                           : " +
									stats.ioEvents());
				System.err.println("\tTotal I/O events enqueued                                     : " +
									stats.ioEventsTotal());
				System.err.println("\tI/O events min service time (microseconds)                    : " +
									stats.ioEventsMinimumServiceTime());
				System.err.println("\tI/O events mean service time (microseconds)                   : " +
									stats.ioEventsMeanServiceTime());
				System.err.println("\tI/O events max service time (microseconds)                    : " +
									stats.ioEventsMaximumServiceTime());
				System.err.println("\tTimer events enqueued                                         : " +
									stats.timerEvents());
				System.err.println("\tTotal timer events enqueued                                   : " +
									stats.timerEventsTotal());
				System.err.println("\tTimer events min service time (microseconds)                  : " +
									stats.timerEventsMinimumServiceTime());
				System.err.println("\tTimer events mean service time (microseconds)                 : " +
									stats.timerEventsMeanServiceTime());
				System.err.println("\tTimer events max service time (microseconds)                  : " +
									stats.timerEventsMaximumServiceTime());
				System.err.println("\tSource events enqueued                                        : " +
									stats.sourceEvents());
				System.err.println("\tTotal source events enqueued                                  : " +
									stats.sourceEventsTotal());
				System.err.println("\tSource events min service time (microseconds)                 : " +
									stats.sourceEventsMinimumServiceTime());
				System.err.println("\tSource events mean service time (microseconds)                : " +
									stats.sourceEventsMeanServiceTime());
				System.err.println("\tSource events max service time (microseconds)                 : " +
									stats.sourceEventsMaximumServiceTime());
				System.err.println("\tUnblock events enqueued                                       : " +
									stats.unblockEvents());
				System.err.println("\tTotal unblock events enqueued                                 : " +
									stats.unblockEventsTotal());
				System.err.println("\tCancel events enqueued                                        : " +
									stats.cancelEvents());
				System.err.println("\tTotal cancel events enqueued                                  : " +
									stats.cancelEventsTotal());
				System.err.println("\tCancel events min service time (microseconds)                 : " +
									stats.cancelEventsMinimumServiceTime());
				System.err.println("\tCancel events mean service time (microseconds)                : " +
									stats.cancelEventsMeanServiceTime());
				System.err.println("\tCancel events max service time (microseconds)                 : " +
									stats.cancelEventsMaximumServiceTime());
				System.err.println("\tCallback events enqueued                                      : " +
									stats.callbackEvents());
				System.err.println("\tTotal callback events enqueued                                : " +
									stats.callbackEventsTotal());
				System.err.println("\tCallback events min service time (microseconds)               : " +
									stats.callbackEventsMinimumServiceTime());
				System.err.println("\tCallback events mean service time (microseconds)              : " +
									stats.callbackEventsMeanServiceTime());
				System.err.println("\tCallback events max service time (microseconds)               : " +
									stats.callbackEventsMaximumServiceTime());			
				System.err.println("\tContext source events enqueued                                : " +
									stats.contextSourceEvents());
				System.err.println("\tTotal context source events enqueued                          : " +
									stats.contextSourceEventsTotal());
				System.err.println("\tContext source events min service time (microseconds)         : " +
									stats.contextSourceEventsMinimumServiceTime());
				System.err.println("\tContext source events mean service time (microseconds)        : " +
									stats.contextSourceEventsMeanServiceTime());
				System.err.println("\tContext source events max service time (microseconds)         : " +
									stats.contextSourceEventsMaximumServiceTime());
				System.err.println("\tEvents currently enqueued                                     : " +
									stats.events());
				System.err.println("\tTotal events enqueued                                         : " +
									stats.eventsTotal());
				System.err.println("\tMinimum age of events enqueued (microseconds)                 : " +
									stats.minimumAge());
				System.err.println("\tMean age of events enqueued (microseconds)                    : " +
									stats.meanAge());
				System.err.println("\tMax age of events enqueued (microseconds)                     : " +
									stats.maximumAge());
			} else {
				outstring +=
					"\"getApplicationSourceId\":\"" + stats.getApplicationSourceId() +
					"\",\"getSender\":\"" + stats.getSender().toString() +
					"\",\"getTimestamp\":\"" 	+ stats.getTimestamp().toString() + "\"," + "\"EVQ_STATS\":{" +
					"\"dataMessages\":"		+ stats.dataMessages() + "," +
					"\"dataMessagesTotal\":"		+ stats.dataMessagesTotal() + "," +
					"\"dataMessagesMinimumServiceTime\":"	+ stats.dataMessagesMinimumServiceTime() + "," +
					"\"dataMessagesMeanServiceTime\":"	+ stats.dataMessagesMeanServiceTime() + "," +
					"\"dataMessagesMaximumServiceTime\":"	+ stats.dataMessagesMaximumServiceTime() + "," +
					"\"responseMessages\":"			+ stats.responseMessages() + "," +
					"\"responseMessagesTotal\":"		+ stats.responseMessagesTotal() + "," +
					"\"responseMessagesMinimumServiceTime\":"	+ stats.responseMessagesMinimumServiceTime() + "," +
					"\"responseMessagesMeanServiceTime\":"	+ stats.responseMessagesMeanServiceTime() + "," +
					"\"responseMessagesMaximumServiceTime\":"	+ stats.responseMessagesMaximumServiceTime() + "," +
					"\"topiclessImmediateMessages\":"		+ stats.topiclessImmediateMessages() + "," +
					"\"topiclessImmediateMessagesTotal\":"	+ stats.topiclessImmediateMessagesTotal() + "," +
					"\"topiclessImmediateMessagesMaximumServiceTime\":"	+ stats.topiclessImmediateMessagesMinimumServiceTime() + "," +
					"\"topiclessImmediateMessagesMeanServiceTime\":"	+ stats.topiclessImmediateMessagesMeanServiceTime() + "," +
					"\"topiclessImmediateMessagesMaximumServiceTime\":"	+ stats.topiclessImmediateMessagesMaximumServiceTime() + "," +
					"\"wildcardReceiverMessages\":"			+ stats.wildcardReceiverMessages() + "," +
					"\"wildcardReceiverMessagesTotal\":"		+ stats.wildcardReceiverMessagesTotal() + "," +
					"\"wildcardReceiverMessagesMinSvcTime\":"	+ stats.wildcardReceiverMessagesMinimumServiceTime() + "," +
					"\"wildcardReceiverMessagesMeanSvcTime\":"	+ stats.wildcardReceiverMessagesMeanServiceTime() + "," +
					"\"wildcardReceiverMessagesMaxSvcTime\":"	+ stats.wildcardReceiverMessagesMaximumServiceTime() + "," +
					"\"ioEvents\":"			+ stats.ioEvents() + "," +
					"\"ioEventsTotal\":"		+ stats.ioEventsTotal() + "," +
					"\"ioEventsMinimumServiceTime\":"	+ stats.ioEventsMinimumServiceTime() + "," +
					"\"ioEventsMeanServiceTime\":"	+ stats.ioEventsMeanServiceTime() + "," +
					"\"ioEventsMaximumServiceTime\":"	+ stats.ioEventsMaximumServiceTime() + "," +
					"\"timerEvents\":"		+ stats.timerEvents() + "," +
					"\"TimerEventsTotal\":"		+ stats.timerEventsTotal() + "," +
					"\"TimerEventsMinSvcTime\":"	+ stats.timerEventsMinimumServiceTime() + "," +
					"\"TimerEventsMeanSvcTime\":"	+ stats.timerEventsMeanServiceTime() + "," +
					"\"TimerEventsMaxSvcTime\":"	+ stats.timerEventsMaximumServiceTime() + "," +
					"\"SrcEvents\":"		+ stats.sourceEvents() + "," +
					"\"SrcEventsTotal\":"		+ stats.sourceEventsTotal() + "," +
					"\"SrcEventsMinSvcTime\":"	+ stats.sourceEventsMinimumServiceTime() + "," +
					"\"SrcEventsMeanSvcTime\":"	+ stats.sourceEventsMeanServiceTime() + "," +
					"\"SrcEventsMaxSvcTime\":"	+ stats.sourceEventsMaximumServiceTime() + "," +
					"\"UnblockEvents\":"		+ stats.unblockEvents() + "," +
					"\"UnblockEventsTotal\":"	+ stats.unblockEventsTotal() + "," +
					"\"CxlEvents\":"		+ stats.cancelEvents() + "," +
					"\"CxlEventsTotal\":"		+ stats.cancelEventsTotal() + "," +
					"\"CxlEventsMinSvcTime\":"	+ stats.cancelEventsMinimumServiceTime() + "," +
					"\"CxlEventsMeanSvcTime\":"	+ stats.cancelEventsMeanServiceTime() + "," +
					"\"CxlEventsMeanSvcTime\":"	+ stats.cancelEventsMaximumServiceTime() + "," +
					"\"clbackEvents\":"		+ stats.callbackEvents() + "," +
					"\"clbackEventsTotal\":"	+ stats.callbackEventsTotal() + "," +
					"\"clbackEventsMinSvcTime\":"	+ stats.callbackEventsMinimumServiceTime() + "," +
					"\"clbackEventsMeanSvcTime\":"	+ stats.callbackEventsMeanServiceTime() + "," +
					"\"clbackEventsMaxSvcTime\":"	+ stats.callbackEventsMaximumServiceTime() + "," +
					"\"CtxSrcEvents\":"		+ stats.contextSourceEvents() + "," +
					"\"CtxSrcEventsTotal\":"	+ stats.contextSourceEventsTotal() + "," +
					"\"CtxSrcEventsMinSvcTime\":"	+ stats.contextSourceEventsMinimumServiceTime() + "," +
					"\"CtxSrcEventsMeanSvcTime\":"	+ stats.contextSourceEventsMeanServiceTime() + "," +
					"\"CtxSrcEventsMaxSvcTime\":"	+ stats.contextSourceEventsMaximumServiceTime() + "," +
					"\"Events\":"			+ stats.events() + "," +
					"\"EventsTotal\":"		+ stats.eventsTotal() + "," +
					"\"MinAge\":"			+ stats.minimumAge() + "," +
					"\"MeanAge\":"			+ stats.meanAge() + "," +
					"\"MaxAge\":"			+ stats.maximumAge()  + "}}}";
				if( _filewriter == null ){
					System.err.println(outstring);
				} else {
					try {
						_filewriter.append(outstring);
						_filewriter.flush();
					}
					catch (IOException ex) {
						System.err.println("Error writing to file: " + ex.toString());
					}
				}
			}
		}
		catch (Exception ex){
			System.err.println("Error getting event queue statistics: " + ex.toString());
		}
		_objRec.doneWithEventQueueStatistics(stats);
	}

	public void onReceive(LBMImmediateMessageSourceStatistics stats)
	{
		String outstring = null; 

		if( lbmmond_json.verbose ) {
			System.err.print("\nImmediate message source statistics received");
		} else { 
			outstring = "\n{\"IM_SRCSTATS_MSG\":{";
		}
		try
		{
		  if( lbmmond_json.verbose ) {
			System.err.print(" from " + stats.getApplicationSourceId());
			System.err.print(" at " + stats.getSender().toString());
			System.err.println(", sent " + stats.getTimestamp().toString());
			System.err.println("Source: " + stats.source());
			System.err.println("Transport: " + stats.typeName());
			switch (stats.type())
			{
				case LBM.TRANSPORT_STAT_TCP:
					System.err.println("\tClients       : " +
									   stats.numberOfClients());
					System.err.println("\tBytes buffered: " +
									   stats.bytesBuffered());
					break;
				case LBM.TRANSPORT_STAT_LBTRM:
					System.err.println("\tLBT-RM datagrams sent                                 : " +
									   stats.messagesSent());
					System.err.println("\tLBT-RM datagrams bytes sent                           : " +
									   stats.bytesSent());
					System.err.println("\tLBT-RM datagrams in transmission window               : " +
									   stats.transmissionWindowMessages());
					System.err.println("\tLBT-RM datagram bytes in transmission window          : " +
									   stats.transmissionWindowBytes());
					System.err.println("\tLBT-RM NAK packets received                           : " +
									   stats.nakPacketsReceived());                            
					System.err.println("\tLBT-RM NAKs received                                  : " +
									   stats.naksReceived());                                  
					System.err.println("\tLBT-RM NAKs ignored                                   : " +
									   stats.naksIgnored());                                   
					System.err.println("\tLBT-RM NAKs shed                                      : " +
									   stats.naksShed());                                      
					System.err.println("\tLBT-RM NAKs ignored (retransmit delay)                : " +
									   stats.naksIgnoredRetransmitDelay());
					System.err.println("\tLBT-RM retransmission datagrams sent                  : " +
									   stats.retransmissionsSent());
					System.err.println("\tLBT-RM retransmission datagram bytes sent             : " +
							   		   stats.retransmissionBytesSent());
					System.err.println("\tLBT-RM datagrams queued by rate control               : " +
									   stats.messagesQueued());
					System.err.println("\tLBT-RM retransmission datagrams queued by rate control: " +
									   stats.retransmissionsQueued());
					break;
				default:
					System.err.println("Error: unknown transport type received." + stats.type());
					break;
			}

		  } else {

				outstring +=
					"\"getApplicationSourceId\":\"" + stats.getApplicationSourceId() +
					"\",\"getSender\":\"" + stats.getSender().toString() +
					"\",\"getTimestamp\":\"" + stats.getTimestamp().toString() + 
					"\",\"source\":\"" + stats.source() + 
					"\",\"typeName\":\"" + stats.typeName() + "\",";
				switch (stats.type())
				{
					case LBM.TRANSPORT_STAT_TCP:
						outstring += "\"STAT_TCP\":{" 	 + 
						"\"numberOfClients\":"		 + stats.numberOfClients() + "," +
						"\"bytesBuffered\":"	 + stats.bytesBuffered() + "}}" ;
					break;
					case LBM.TRANSPORT_STAT_LBTRM:
						outstring += "\"STAT_LBTRM\"" + ":{" +
						"\"messagesSent\":"		 + stats.messagesSent() + "," +
						"\"bytesSent\":"	 + stats.bytesSent() + "," +
						"\"transmissionWindowMessages\":"	 + stats.transmissionWindowMessages() + "," +
						"\"transmissionWindowBytes\":"	 + stats.transmissionWindowBytes() + "," +
						"\"nakPacketsReceived\":"	 + stats.nakPacketsReceived() + "," +
						"\"naksReceived\":"		 + stats.naksReceived() + "," +
						"\"naksIgnored\":"	 + stats.naksIgnored() + "," +
						"\"naksShed\":"		 + stats.naksShed() + "," +
						"\"naksIgnoredRetransmitDelay\":" + stats.naksIgnoredRetransmitDelay() + "," +
						"\"retransmissionsSent\":"		 + stats.retransmissionsSent() + "," +
					  	"\"retransmissionBytesSent\":"	 + stats.retransmissionBytesSent() + "," +
						"\"messagesQueued\":"	 + stats.messagesQueued() + "," +
						"\"retransmissionsQueued\":"		 + stats.retransmissionsQueued() + "}}";
					break;

					default:
					System.err.println("Error: unknown transport type received." + stats.type());
					break;
				}
				outstring += "}";
				if( _filewriter == null ){
					System.err.println(outstring);
				} else {
					try {
						_filewriter.append(outstring);
						_filewriter.flush();
					}
					catch (IOException ex) {
						System.err.println("Error writing to file: " + ex.toString());
					}
				}
		  }
		}
		catch (Exception ex)
		{
			System.err.println("Error getting immediate message source statistics: " + ex.toString());
		}
		_objRec.doneWithImmediateMessageSourceStatistics(stats);
	}
	
	public void onReceive(LBMImmediateMessageReceiverStatistics stats)
	{
		String outstring = null;

		if( lbmmond_json.verbose ) {
			System.err.print("\nImmediate message receiver statistics received");
		} else { 
			outstring = "\n{\"IM_RCVSTATS_MSG\":{";
		}
		try
		{
			if( lbmmond_json.verbose ) {
				System.err.print(" from " + stats.getApplicationSourceId());
				System.err.print(" at " + stats.getSender().toString());
				System.err.println(", sent " + stats.getTimestamp().toString());
				System.err.println("Source: " + stats.source());
				System.err.println("Transport: " + stats.typeName());
				switch (stats.type())
				{
					case LBM.TRANSPORT_STAT_TCP:
						System.err.println("\tLBT-TCP bytes received                                    : " +
										   stats.bytesReceived());
						System.err.println("\tLBM messages received                                     : " +
										   stats.lbmMessagesReceived());
						System.err.println("\tLBM messages received with uninteresting topic            : " +
										   stats.noTopicMessagesReceived());
						System.err.println("\tLBM requests received                                     : " +
										   stats.lbmRequestsReceived());
						break;
					case LBM.TRANSPORT_STAT_LBTRM:
						System.err.println("\tLBT-RM datagrams received                                 : " +
										   stats.messagesReceived());
						System.err.println("\tLBT-RM datagram bytes received                            : " +
										   stats.bytesReceived());
						System.err.println("\tLBT-RM NAK packets sent                                   : " +
										   stats.nakPacketsSent());
						System.err.println("\tLBT-RM NAKs sent                                          : " +
										   stats.naksSent());
						System.err.println("\tLost LBT-RM datagrams detected                            : " +
										   stats.lost());
						System.err.println("\tNCFs received (ignored)                                   : " +
										   stats.ncfsIgnored());                                       
						System.err.println("\tNCFs received (shed)                                      : " +
										   stats.ncfsShed());                                          
						System.err.println("\tNCFs received (retransmit delay)                          : " +
										   stats.ncfsRetransmissionDelay());                           
						System.err.println("\tNCFs received (unknown)                                   : " +
										   stats.ncfsUnknown());                                       
						System.err.println("\tLoss recovery minimum time                                : " +
										   stats.minimumRecoveryTime() + "ms");                        
						System.err.println("\tLoss recovery mean time                                   : " +
										   stats.meanRecoveryTime() + "ms");                           
						System.err.println("\tLoss recovery maximum time                                : " +
										   stats.maximumRecoveryTime() + "ms");                        
						System.err.println("\tMinimum transmissions per individual NAK                  : " +
										   stats.minimumNakTransmissions());                           
						System.err.println("\tMean transmissions per individual NAK                     : " +
										   stats.meanNakTransmissions());                              
						System.err.println("\tMaximum transmissions per individual NAK                  : " +
										   stats.maximumNakTransmissions());
						System.err.println("\tDuplicate LBT-RM datagrams received                       : " +
										   stats.duplicateMessages());
						System.err.println("\tLBT-RM datagrams unrecoverable (window advance)           : " +
										   stats.unrecoveredMessagesWindowAdvance());
						System.err.println("\tLBT-RM datagrams unrecoverable (NAK generation expiration): " +
										   stats.unrecoveredMessagesNakGenerationTimeout());
						System.err.println("\tLBT-RM LBM messages received                              : " +
										   stats.lbmMessagesReceived());                               
						System.err.println("\tLBT-RM LBM messages received with uninteresting topic     : " +
										   stats.noTopicMessagesReceived());                           
						System.err.println("\tLBT-RM LBM requests received                              : " +
										   stats.lbmRequestsReceived());                               
						System.err.println("\tLBT-RM datagrams dropped (size)                           : " +
										   stats.datagramsDroppedIncorrectSize());                     
						System.err.println("\tLBT-RM datagrams dropped (type)                           : " +
								   			stats.datagramsDroppedType());                             
						System.err.println("\tLBT-RM datagrams dropped (version)                        : " +
								   			stats.datagramsDroppedVersion());                          
						System.err.println("\tLBT-RM datagrams dropped (header)                         : " +
								   			stats.datagramsDroppedHeader());                           
						System.err.println("\tLBT-RM datagrams dropped (other)                          : " +
								   			stats.datagramsDroppedOther());
						System.err.println("\tLBT-RM datagrams received out of order                    : " +
								   			stats.outOfOrder());
						break;
					default:
						System.err.println("Error: unknown transport type received." + stats.type());
						break;
					}
			} else {

				outstring +=
					"\"getApplicationSourceId\":\"" + stats.getApplicationSourceId() +
					"\",\"getSender\":\"" + stats.getSender().toString() +
					"\",\"getTimestamp\":\"" + stats.getTimestamp().toString() + 
					"\",\"source\":\"" + stats.source() + 
					"\",\"typeName\":\"" + stats.typeName() + "\",";
				switch (stats.type())
				{
					case LBM.TRANSPORT_STAT_TCP:
						outstring += "\"STAT_TCP\":{" 	 + 
						"\"bytesReceived\":" 	 + stats.bytesReceived() + "," +
						"\"lbmMessagesReceived\":"	 + stats.lbmMessagesReceived() + "," +
						"\"NoTopicmessagesReceived\":"	 + stats.noTopicMessagesReceived() + "," +
						"\"lbmRequestsReceived\":"	 + stats.lbmRequestsReceived() + "}}";
						break;
					case LBM.TRANSPORT_STAT_LBTRM:
						outstring += "\"STAT_LBTRM\":{" + 
						"\"messagesReceived\":"	   	 + stats.messagesReceived() + "," + 
						"\"bytesReceived\":"	 + stats.bytesReceived() + "," + 
						"\"nakPacketsSent\":"	 + stats.nakPacketsSent() + "," + 
						"\"naksSent\":"		 + stats.naksSent() + "," + 
						"\"lost\":"		 + stats.lost() + "," + 
						"\"ncfsIgnored\":"	 + stats.ncfsIgnored() + "," + 
						"\"ncfsShed\":"		 + stats.ncfsShed() + "," + 
						"\"ncfsRetransmissionDelay\":"	 + stats.ncfsRetransmissionDelay() + "," + 
						"\"ncfsUnknown\":"	 + stats.ncfsUnknown() + "," + 
						"\"minimumRecoveryTime\":"	 + stats.minimumRecoveryTime() + "," +
						"\"meanRecoveryTime\":"  + stats.meanRecoveryTime() + "," +
						"\"maximumRecoveryTime\":"	 + stats.maximumRecoveryTime() + "," +
						"\"minimumNakTransmissions\":"	 + stats.minimumNakTransmissions() + "," + 
						"\"meanNakTransmissions\":"	 + stats.meanNakTransmissions() + "," + 
						"\"maximumNakTransmissions\":"	 + stats.maximumNakTransmissions() + "," +  
						"\"duplicateMessages\":"		 + stats.duplicateMessages() + "," +
						"\"unrecoveredMessagesWindowAdvance\":"	 + stats.unrecoveredMessagesWindowAdvance() + "," +
						"\"unrecoveredMessagesNakGenerationTimeout\":"   + stats.unrecoveredMessagesNakGenerationTimeout() + "," +
						"\"lbmMessagesReceived\":"	 + stats.lbmMessagesReceived() + "," +                               
						"\"NoTopicmessagesReceived\":"	 + stats.noTopicMessagesReceived() + "," +                           
						"\"lbmRequestsReceived\":"	 + stats.lbmRequestsReceived() + "," +                               
						"\"datagramsDroppedIncorrectSize\":"	 + stats.datagramsDroppedIncorrectSize() + "," +                     
						"\"datagramsDroppedType\":"	 + stats.datagramsDroppedType() + "," +                              
						"\"datagramsDroppedVersion\":"	 + stats.datagramsDroppedVersion() + "," +                           
						"\"datagramsDroppedHeader\":"	 + stats.datagramsDroppedHeader() + "," +                            
						"\"datagramsDroppedOther\":"	 + stats.datagramsDroppedOther() + "," +
						"\"outOfOrder\":"	 + stats.outOfOrder() + "}}";
						break;
					default:
						System.err.println("Error: unknown transport type received." + stats.type());
						break;
				}
				outstring += "}";
				if( _filewriter == null ){
					System.err.println(outstring);
				} else {
					try {
						_filewriter.append(outstring);
						_filewriter.flush();
					}
					catch (IOException ex) {
						System.err.println("Error writing to file: " + ex.toString());
					}
				}
			}
		}
		catch (Exception ex)
		{
			System.err.println("Error getting immediate message receiver statistics: " + ex.toString());
		}
		_objRec.doneWithImmediateMessageReceiverStatistics(stats);
	}
}


class LBMDaemonStatsReceiver implements LBMReceiverCallback, LBMImmediateMessageCallback
{
        public long imsg_count = 0;
        public long msg_count = 0;
        public long byte_count = 0;
        public long rx_msgs = 0;
        public long otr_msgs = 0;
        public long req_count = 0;
        public long unrec_count = 0;
        public long burst_loss = 0;

        public long data_start_time = 0;
        public long data_end_time = 0;
	public static char STATS_TYPE_NONE = 0;
	public static char STATS_TYPE_UMP = 1;
	public static char STATS_TYPE_DRO = 2;
	public static char STATS_TYPE_LBM = 3;
	boolean _verbose = false;
	char _stats_type = 0;
	lbmmond_json _lbmmond_json = new lbmmond_json();
	private BufferedWriter _filewriter = null;
	private char[] JSON_buffer = new char[(1024*8)];


        public LBMDaemonStatsReceiver(boolean verbose, char stats_type, BufferedWriter filewriter) {
                _verbose = verbose;
                _stats_type = stats_type;
		_filewriter = filewriter;
        }

        public int onReceiveImmediate(Object cbArg, LBMMessage msg)
        {
                imsg_count++;
                return onReceive(cbArg, msg);
        }

        public int onReceive(Object cbArg, LBMMessage msg)
        {
		long sqn = msg.sequenceNumber();
		String outstring = null;

		if (_verbose)
		{
			System.out.print("[" + msg.topicName() + "][" + msg.source() + "][" + sqn + "],");
		}
                switch (msg.type())
                {
                        case LBM.MSG_DATA:
				msg_count++;
				byte_count += msg.dataLength();
                                if (msg_count == 1)
                                        data_start_time = System.currentTimeMillis();
                                else
                                        data_end_time = System.currentTimeMillis();

				if ((msg.flags() & LBM.MSG_FLAG_RETRANSMIT) != 0) {
                                        rx_msgs++;
                                }
				if ((msg.flags() & LBM.MSG_FLAG_OTR) != 0) {
					otr_msgs++;
				}
                                if (_verbose)
                                {
                                        System.out.println("msg_count: " + msg_count);
                                }

				/* JSON_buffer[] will be filled with a JSON char string of parsed statistics (or XML config file). The string size is returned */
				int JSON_buffer_size = _lbmmond_json.stat_parser(msg.dataBuffer(), msg.dataLength(), _verbose,  _stats_type, JSON_buffer);
				if(JSON_buffer_size == 0 ){
                                	if (_verbose){
						System.err.println("ERROR! Parsing Failed");
					}
				} else {
					char[] JSON_copy = Arrays.copyOf(JSON_buffer, JSON_buffer_size);
					String ret_val= new String(JSON_copy);

					if(JSON_copy[0] != '"'){
						// First character is not '"', we assume for better or worse that this is an XML configuration file
						outstring = "\nXML CONFIG:\n"  + ret_val;
						System.out.println(outstring);
					} else {
						outstring = "\n{\"DAEMON_STATS\":{"  + ret_val + "}}";

						if( _filewriter == null ){
							System.out.println(outstring);
						} else {
							try {
								_filewriter.append(outstring);
								_filewriter.flush();
							}
							catch (IOException ex) {
								System.err.println("Error writing to file: " + ex.toString());
							}
						}
					}
				}
                                break;
                        case LBM.MSG_BOS:
                                if (!_verbose)
                                {
                                	System.out.println("Time: " + System.currentTimeMillis() + " ms, Beginning of Transport Session " + "[" + msg.topicName() + "][" + msg.source() + "][" + sqn + "]");
				}
                                break;
                        case LBM.MSG_EOS:
                                if (!_verbose)
                                {
                                	System.out.print("Time: " + System.currentTimeMillis() + " ms, End of Transport Session " + "[" + msg.topicName() + "][" + msg.source() + "][" + sqn + "]");
				}
                                print_summary(msg_count);
				msg_count = 0;
                                break;
                        case LBM.MSG_UNRECOVERABLE_LOSS:
				unrec_count++;
                                if (_verbose)
                                {
                                        System.out.println(" LOST ");
                                }
                                break;
                        case LBM.MSG_UNRECOVERABLE_LOSS_BURST:
                                burst_loss++;
                                if (_verbose)
                                {
                                        System.out.println(" LOST BURST ");
                                }
                                break;
                        case LBM.MSG_REQUEST:
                               req_count++;
                                if (_verbose)
                                {
                                        System.out.println(" REQUEST ");
                                }
                                break;
                        default:
                                System.out.println("Unknown lbm_msg_t type " + msg.type() + " [" + msg.topicName() + "][" + msg.source() + "]");
                                break;
                }
                System.out.flush();
                msg.dispose();
                return 0;
        }

	private void print_summary(long msg_count)
	{
		double total_time_sec, mps, bps;

                total_time_sec = 0.0;
                mps = 0.0;
                bps = 0.0;

                long bits_received = byte_count * 8;
                long total_time = data_end_time - data_start_time;

                NumberFormat nf = NumberFormat.getInstance();
                nf.setMaximumFractionDigits(3);

                total_time_sec = total_time / 1000.0 ;

                if (total_time_sec > 0) {
                        mps = msg_count / total_time_sec ;
                        bps = bits_received / total_time_sec ;
                }

                System.out.println("\nTotal time         : "
                                   + nf.format (total_time_sec)
                                   + "  sec");
                System.out.println("Messages received  : "
                                   + msg_count);
                System.out.println("Bytes received     : "
                                   + byte_count);
                System.out.println("Avg. throughput    : "
                                   + nf.format (mps / 1000.0)
                                   + " Kmsgs/sec, "
                                   + nf.format (bps / 1000000.0)
                                   + " Mbps\n\n");

        }
	


}

